#include<stdio.h>
#include<ctype.h> 
#include<math.h> 
#define MAX 20 
int stack[MAX], top = -1;

 
void 
push (int item) 
{
  
stack[++top] = item;

} 
int 


pop () 
{
  
return (stack[top--]);

}


 
 
void 
main () 
{
  
char suffix[50];
  
 
int i = 0, temp;
  
 
printf ("\nEnter a valid suffix expression:\n");
  
 
scanf ("%s", suffix);
  
 
for (i = 0; suffix[i] != '\0'; i++)
    
 
    {
      
if (isdigit (suffix[i]))
	
 
push (suffix[i] - '0');
      
 
switch (suffix[i])
	
 
	{
	
case '+':
	  
push (pop () + pop ());
	  
 
break;
	
 
case '-':
	  
temp = pop ();
	  
 
push (pop () - temp);
	  
 
break;
	
 
case '*':
	  
push (pop () * pop ());
	  
 
break;
	
 
case '/':
	  
temp = pop ();
	  
 
push (pop () / temp);
	  
 
break;
	
case '%':
	  
temp = pop ();
	  
 
push (pop () % temp);
	  
break;
	
 
case '^':
	  
temp = pop ();
	  
 
push (pow (pop (), temp));
	  
 
break;
	
}
    
}
  printf ("The value of the given expression is %d\n", pop ());
}




5 B 


#include <stdio.h>
void towers(int, char, char, char); 
int main() {   
int num;    
printf("Enter the number of disks : ");   
scanf("%d", &num);    
printf("The sequence of moves involved in the Tower of Hanoi are :\n");   
towers(num, 'A', 'C', 'B');   
getch();   
return 0; 
} 
void towers(int num, char source, char dest, char aux) 
{     if (num == 1)  
{        
printf("\n Move disk 1 from peg %c to peg %c", source,dest);   
return;     
}     
towers(num - 1, source, aux,dest);   
printf("\n Move disk %d from peg %c to peg %c", num, source, dest);   
towers(num - 1, aux, dest, source); } 





 
